package mqtt;

import java.sql.SQLException;

import org.eclipse.paho.client.mqttv3.MqttException;

import startup.StartupManager;

/**
 * @author Engin Leloglu - 2016
 * 
 * MqttManager class provides the control of Mqtt parameters and functions generally.
 */
public class MqttManager {
	
	private StartupManager startupManager 	= null;
	private MqttHandler mqttHandler			= null;
	
	private final String BROKER 	= "192.168.2.100"; 				// Broker(server) ip of vesbeeing(Server)
	private final String CLIENTID 	= "startupService2";			// Client id
	private int QOS 				= 2;							// Quality of service (0, 1 or 2)
	private final boolean CLEANSESS = true;							// Clean session
	private final String PFX		= "vestel/newDevice/";			// Prefix of topic
	private String defaultId		= null;
	
	////////// SETTINGS FOR SIMPLE COMM.(Default) ////////
	private int PORT				= 1883;
	private final boolean SSL 		= false;
	private final String USERNAME 	= null;
	private final String PASSWORD 	= null;
	///////////////////////////////////////////////////////
	////////// SETTINGS FOR SSL/TLS BASED COMM. ///////////
	// private int PORT = 8883;
	// private boolean SSL = true;
	// private String USERNAME = "engin";
	// private String PASSWORD = "222";
	///////////////////////////////////////////////////////
	
	public MqttManager(StartupManager startupManager) throws MqttException {
		
		this.startupManager = startupManager;
		mqttHandler = MqttHandler.getHandlerInst(this, BROKER, CLIENTID, PORT, CLEANSESS, SSL, USERNAME, PASSWORD);
		subscribe();
	}
	
	/**
	 * Generate new id for each new device that has just added into the system.
	 */
	public void generateNewId() throws SQLException, MqttException{
		
		// Add defaultId of device into DB and return new id(primary key) that is generated by DB.
		int generatedId = startupManager.notifyInsertion(defaultId);
		
		// Publish generatedId matched with related defaultId.
		publish(defaultId, Integer.toString(generatedId), false);

	}

	/**
	 *  Publish message for related device with quality of service, generated-id and retained flag information. 
	 */
	public void publish(String defaultId, String generatedId, boolean retained){
		
		try {
			mqttHandler.publish(PFX + defaultId, QOS, generatedId.getBytes(), retained);
		} catch (MqttException me) {
			// Display full details of any exception that occurs
			System.out.println("reason " + me.getReasonCode());
			System.out.println("msg " + me.getMessage());
			System.out.println("loc " + me.getLocalizedMessage());
			System.out.println("cause " + me.getCause());
			System.out.println("excep " + me);
			me.printStackTrace();
		} catch (Throwable th) {
			System.out.println("Throwable caught " + th);
			th.printStackTrace();
		}
	}
	
	/**
	 * Subscribe related topic to get all default ids of new devices that has just added into the system.
	 */
	public void subscribe(){

		try {
			mqttHandler.subscribe(PFX + "defaultId", QOS);
		} catch (MqttException me) {
			// Display full details of any exception that occurs
			System.out.println("reason " + me.getReasonCode());
			System.out.println("msg " + me.getMessage());
			System.out.println("loc " + me.getLocalizedMessage());
			System.out.println("cause " + me.getCause());
			System.out.println("excep " + me);
			me.printStackTrace();
		} catch (Throwable th) {
			System.out.println("Throwable caught " + th);
			th.printStackTrace();
		}
	}

	// Getters and setters.
	public String getDefaultId() {
		return defaultId;
	}

	public void setDefaultId(String defaultId) {
		this.defaultId = defaultId;
	}
	
}
